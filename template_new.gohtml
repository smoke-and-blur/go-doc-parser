<!DOCTYPE html>
<meta charset="utf-8">

<meta name="viewport" content="width=device-width, initial-scale=1" />

<script type="text/javascript"
    src="https://cdn.jsdelivr.net/gh/vanjs-org/van/public/van-1.5.5.nomodule.min.js"></script>

<style>
    table * {
        border: 1px solid #888;
    }

    table,
    td {
        width: 100%;
    }

    table {
        border-collapse: collapse;
        border-spacing: 0;
    }

    th {
        background: #eee;
    }

    * {
        font-size: 16px;
        box-sizing: border-box;
    }

    .divider {
        padding: 3px;
        grid-column: span 4;
        border-radius: 6px;
        background: #eee;
        text-align: center;
        color: #666;
        font-weight: bold;
    }

    #container {
        display: flex;
        flex-direction: column;
        gap: 16px;
        max-width: 720px;
        align-items: center;
        justify-content: center;
        padding: 16px;
    }

    #container>* {
        width: 100%;
    }

    body {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .number {
        text-align: right;
    }

    .header {
        font-weight: bold;
        font-size: 18px;
        text-wrap: wrap;
        max-width: 24ch;
        overflow-wrap: anywhere;
        text-align: center;
    }

    .options {
        display: flex;
        flex-direction: row;
        gap: 16px;
        justify-content: center;
        width: 100%;
    }

    button {
        border-radius: 6px;
        border: 1px solid #eee;
        background: none;
        padding: 6px;
    }

    button:hover {
        cursor: pointer;
        background: #eee;
    }

    .table {
        display: grid;
        grid-template-columns: 1fr 5fr 5fr 1fr;
        gap: 6px;
        border: 1px solid #eee;
        border-radius: 12px;
        padding: 6px;
    }
</style>

<script>
    const { p, div, pre, button, textarea, img, input } = van.tags
    const add = van.add

    var data = {{.}}

    document.addEventListener(
        "DOMContentLoaded",
        function () {
            const container = document.getElementById('container')

            add(
                container,
                img({ src: `https://upload.wikimedia.org/wikipedia/commons/8/8d/Emblem_of_the_State_Border_Guard_Service_of_Ukraine.svg`, style: `width: 36px; height: 36px` },),
            )

            renderData(container, data)
        }
    )

    function calculateSpans(items) {
        var last = -1
        var span = 0

        for (var i = 0; i < items.length + 1; i++) {
            if (items[last] && items[last].value) {
                items[last].span += span
                span = 0
            }

            if (items[i] && items[i].value) {
                last = i
                continue
            }

            // only count spans if there is an empty cell
            span++
        }
    }

    function renderGroups(groups, divider, cutoff, sum) {
        if (!groups) {
            console.log(groups, divider)
            return
        }

        var out = div({ class: `table` })

        divider && add(out, div({ class: 'divider' }, divider))

        var total = 0

        for (group of groups) {
            const components = [
                { value: group.Type, span: 1 },
                { value: group.Name, span: 1 },
                { value: group.Hint, span: 1 },
            ]

            calculateSpans(components)

            for (component of components) {
                component.value && add(out, div({ style: `grid-column: span ${component.span};` }, component.value))
            }

            var length = group.Events

            if (Array.isArray(group.Events)) {
                length = group.Events.filter(afterCutoff(cutoff)).length
            }

            total += length

            add(out, div({ class: `number` }, length))
        }

        sum && add(out, div({ class: `number`, style: `grid-column: span 4; font-weight:bold` }, total))

        return out
    }

    function renderSupergroups(supergroups, cutoff) {
        var out = []

        for (groups of supergroups) {
            out.push(
                add(renderGroups(groups, groups[0].Name, cutoff, true))
            )
        }

        return out
    }

    function renderPages(pages) {
        var out = []
        for (let page of pages) {
            out.push(
                div({ class: "header" }, page.Filename),
                input({type: "number", onchange: (e)=>page.cutoff=e.target.valueAsNumber, value: page.cutoff}),
                renderSupergroups(page.SelectedSupergroups, page.cutoff), // "Відомі"
                renderGroups(page.OtherGroups, "Інші", page.cutoff),
            )
        }
        return out
    }

    function aggregateSelected(data) {
        var aggregate = new Map()

        for (page of data.Pages) {
            for (groups of page.SelectedSupergroups) {
                var total = 0

                for (group of groups) {
                    total += group.Events.filter(afterCutoff(page.cutoff)).length
                }

                var current = aggregate.get(groups[0].Name)
                if (!current) {
                    current = 0
                }
                aggregate.set(groups[0].Name, current + total)
            }
        }

        var out = []

        for (var [k, v] of aggregate) {
            out.push({ Name: k, Events: v })
        }

        return out
    }

    function afterCutoff(cutoff) {
        return (e) => {
            return !cutoff || e.End >= cutoff
        }
    }

    function aggregateOther(data) {
        var aggregate = new Map()

        for (page of data.Pages) {
            for (group of page.OtherGroups) {
                var key = { Type: group.Type, Name: group.Name, Hint: group.Hint }

                key = JSON.stringify(key)

                var current = aggregate.get(key)
                if (!current) {
                    current = 0
                }

                aggregate.set(key, current + group.Events.filter(afterCutoff(page.cutoff)).length)
            }
        }

        var out = []

        for (var [k, v] of aggregate) {
            k = JSON.parse(k)
            out.push({ ...k, Events: v })
        }

        return out
    }


    function renderData(container, data) {
        add(container,
            renderPages(data.Pages),
            div({ class: "header" }, "Підсумок"),
            renderGroups(aggregateOther(data), 0, "Невідомі за всі документи"),
            renderGroups(aggregateSelected(data), 0, "Сума за всі документи"),
            div({ class: `header` }, "Примітки")
        )

        for (aggregate of data.AggregatedComments) {
            var t = div({ class: `table` },
                div({ class: `divider` },
                    [aggregate.Type, aggregate.Name, aggregate.Hint].filter(Boolean).join(" ")
                ),
            )
            for (comment of aggregate.Comments) {
                add(t, div({ style: `grid-column: span 4;` }, comment))
            }
            add(container, t)
        }

        add(container,
            textarea(
                {
                    id: `summary`,
                    rows: 12,
                    value: data.Summary,
                    style: `border-radius: 12px; border: 1px solid #eee; padding: 6px;`,
                },
            ),
            div({ class: `options` },
                button({ onclick: () => { navigator.clipboard.writeText(document.getElementById('summary').value); alert('Скопійовано!') } }, "Скопіювати"),
                button({ onclick: () => { navigator.share({ text: document.getElementById('summary').value }) } }, "Поділитися"),
            ),
        )

    }
</script>

<div id="container">

</div>