<!DOCTYPE html>
<meta charset="utf-8">

<meta name="viewport" content="width=device-width, initial-scale=1" />

<script type="text/javascript"
    src="https://cdn.jsdelivr.net/gh/vanjs-org/van/public/van-1.5.5.nomodule.min.js"></script>

<style>
    table * {
        border: 1px solid #888;
    }

    table,
    td {
        width: 100%;
    }

    table {
        border-collapse: collapse;
        border-spacing: 0;
    }

    th {
        background: #eee;
    }

    * {
        font-size: 16px;
        box-sizing: border-box;
        margin: 0;
    }

    .divider {
        padding: 3px;
        grid-column: span 4;
        border-radius: 6px;
        background: #eee;
        text-align: center;
        color: #666;
        font-weight: bold;
    }

    #container {
        display: flex;
        flex-direction: column;
        gap: 16px;
        max-width: 720px;
        align-items: center;
        justify-content: center;
        padding: 16px;
    }

    .matrix {
        display: grid;
        gap: 16px;
        grid-template-columns: 1fr 1fr;
    }

    #container>* {
        width: 100%;
    }

    body {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .number {
        text-align: right;
    }

    .header {
        font-weight: bold;
        font-size: 18px;
        text-wrap: wrap;
        max-width: 24ch;
        overflow-wrap: anywhere;
        text-align: center;
    }

    .options {
        display: flex;
        flex-direction: row;
        gap: 16px;
        justify-content: center;
        align-items: center;
        width: 100%;
    }

    button {
        border-radius: 6px;
        border: 1px solid #eee;
        background: none;
        padding: 6px;
    }

    button:hover {
        cursor: pointer;
        background: #eee;
    }

    .table {
        align-content: start;
        display: grid;
        grid-template-columns: 1fr 5fr 5fr 1fr;
        gap: 6px;
        border: 1px solid #eee;
        border-radius: 12px;
        padding: 6px;
    }

    input[type="checkbox"] {
        width: 24px;
        height: 24px;
    }
</style>

<script src="https://d3js.org/d3.v7.min.js"></script>

<script>
    const { p, div, pre, button, textarea, img, input } = van.tags
    const add = van.add

    let data = {{.}}

    for (const page of data.Pages) {
        page.cutoff = van.state(0)

        for (const groups of page.SelectedSupergroups) {
            for (const group of groups) {
                group.filtered = van.derive(() => group.Events.filter(afterCutoff(page.cutoff.val)).length)
            }

            groups.total = van.derive(() => {
                let total = 0
                for (const group of groups) {
                    total += group.filtered.val
                }
                return total
            })


        }

        for (const group of page.OtherGroups) {
            group.filtered = van.derive(() => group.Events.filter(afterCutoff(page.cutoff.val)).length)
        }
    }

    let aggregateSelected = van.derive(() => {
        var aggregate = new Map()

        for (page of data.Pages) {
            for (groups of page.SelectedSupergroups) {
                var current = aggregate.get(groups[0].Name)
                if (!current) {
                    current = 0
                }
                aggregate.set(groups[0].Name, current + groups.total.val)
            }
        }

        var out = []

        for (var [k, v] of aggregate) {
            out.push({ Name: k, filtered: v })
        }

        return out
    })

    let aggregateOther = van.derive(() => {
        var aggregate = new Map()

        for (page of data.Pages) {
            for (group of page.OtherGroups) {
                var key = { Type: group.Type, Name: group.Name, Hint: group.Hint }

                key = JSON.stringify(key)

                var current = aggregate.get(key)
                if (!current) {
                    current = 0
                }

                aggregate.set(key, current + group.filtered.val)
            }
        }

        out = []

        for (var [k, v] of aggregate) {
            k = JSON.parse(k)
            out.push({ ...k, filtered: v })
        }

        return out
    })

    let aggregateComments = van.derive(() => {
        let aggregate = new Map();

        for (page of data.Pages) {
            for (group of page.OtherGroups) {
                for (comment of group.Events.filter(afterCutoff(page.cutoff.val)).filter((e) => e.Comment)) {
                    id = JSON.stringify({ Type: group.Type, Name: group.Name, Hint: group.Hint })
                    let current = aggregate.get(group.ID)
                    if (!current) {
                        current = []
                    }
                    current.push(comment)
                    aggregate.set(id, current)
                }
            }

            for (groups of page.SelectedSupergroups) {
                for (group of groups) {
                    for (comment of group.Events.filter(afterCutoff(page.cutoff.val)).filter((e) => e.Comment)) {
                        id = JSON.stringify({ Name: groups[0].Name })
                        let current = aggregate.get(group.ID)
                        if (!current) {
                            current = []
                        }
                        current.push(comment)
                        aggregate.set(id, current)
                    }
                }
            }
        }

        out = []

        for ([k, v] of aggregate) {
            k = JSON.parse(k)
            out.push({ ...k, comments: v })
        }

        return out
    })

    let renderedComments = van.derive(() => {
        let out = div({ class: "matrix" });

        for (group of aggregateComments.val) {
            var t = div({ class: `table` },
                div({ class: `divider` },
                    [group.Type, group.Name, group.Hint].filter(Boolean).join(" ")
                ),
            )

            if (!group.comments) {
                continue
            }

            for (comment of group.comments) {
                add(t, div({ style: `grid-column: span 4;` }, comment.Comment))
            }

            add(out, t)
        }

        return out
    })

    function Plural(one, few, many) {
        return function (n) {
            const mod10 = n % 10;
            const mod100 = n % 100;

            let out = many;

            if (mod10 === 1 && mod100 !== 11) {
                out = one;
            } else if (mod10 >= 2 && mod10 <= 4 && (mod100 < 12 || mod100 > 14)) {
                out = few;
            }

            return `${n} ${out}`;
        };
    }


    let summary = van.derive(() => {
        let out = ""

        let cases = new Map(aggregateComments.val.map(comment => [comment.Name, comment.comments.length]))

        for ([index, groups] of aggregateSelected.val.entries()) {
            let subsummary = "ОПДК не виявлено"
            let count = cases.get(groups.Name)

            let casesText = Plural("випадку", "випадках", "випадках")
            if (count > 0) {
                subsummary = `в ${casesText(count)} _ затриманих`
            }
            out += `${index + 1}. ${groups.Name} - польотів: ${groups.filtered}, ${subsummary};\n`
        }

        return out
    })

    function afterCutoff(cutoff) {
        return (e) => {
            return !cutoff || e.End >= cutoff
        }
    }

    document.addEventListener(
        "DOMContentLoaded",
        function () {
            const container = document.getElementById('container')

            add(
                container,
                img({ src: `https://upload.wikimedia.org/wikipedia/commons/8/8d/Emblem_of_the_State_Border_Guard_Service_of_Ukraine.svg`, style: `width: 36px; height: 36px` },),
            )

            renderData(container, data)
        }
    )

    function renderChart(events) {
        return
        // Declare the chart dimensions and margins.

        // for (event of events) {
        //     event.EndTime
        // }

        const width = 720;
        const height = 200;
        const marginTop = 0;
        const marginRight = 0;
        const marginBottom = 0;
        const marginLeft = 0;

        // Declare the x (horizontal position) scale.
        const x = d3.scaleUtc()
            .domain([new Date("2023-01-01"), new Date("2024-01-01")])
            .range([marginLeft, width - marginRight]);

        // Declare the y (vertical position) scale.
        const y = d3.scaleLinear()
            .domain([0, 100])
            .range([height - marginBottom, marginTop]);

        // Create the SVG container.
        const svg = d3.create("svg")
            .attr("width", width)
            .attr("height", height);

        // Add the x-axis.
        svg.append("g")
            .attr("transform", `translate(0,${height - marginBottom})`)
            .call(d3.axisBottom(x));

        // Add the y-axis.
        svg.append("g")
            .attr("transform", `translate(${marginLeft},0)`)
            .call(d3.axisLeft(y));

        // Append the SVG element.
        return svg.node();
    }

    function calculateSpans(items) {
        var last = -1
        var span = 0

        for (var i = 0; i < items.length + 1; i++) {
            if (items[last] && items[last].value) {
                items[last].span += span
                span = 0
            }

            if (items[i] && items[i].value) {
                last = i
                continue
            }

            // only count spans if there is an empty cell
            span++
        }
    }

    function renderGroups(groups, divider, sum) {
        if (!groups) {
            console.log(groups, divider)
            return
        }

        var out = div({ class: `table` })

        divider && add(out, div({ class: 'divider' }, divider))

        var total = 0

        for (group of groups) {
            const components = [
                { value: group.Type, span: 1 },
                { value: group.Name, span: 1 },
                { value: group.Hint, span: 1 },
            ]

            calculateSpans(components)

            for (component of components) {
                component.value && add(out, div({ style: `grid-column: span ${component.span};` }, component.value))
            }

            // var length = group.Events

            // TODO: ???
            // if (Array.isArray(group.Events)) {
            // length = group.filtered.length
            // }

            // total += length

            add(out, div({ class: `number` }, group.filtered))
        }

        sum && add(out, div({ class: `number`, style: `grid-column: span 4; font-weight:bold` }, groups.total))

        return out
    }

    function renderSupergroups(supergroups) {
        var out = []

        for (groups of supergroups) {
            out.push(
                add(renderGroups(groups, groups[0].Name, true))
            )
        }

        return out
    }

    function renderPages(pages) {
        var out = []
        for (let page of pages) {
            out.push(
                div({ class: "header" }, page.Filename),
                div({ class: "options", style: `gap: 4px` },
                    input({ type: "checkbox", onchange: (e) => page.cutoff.val = e.target.checked ? 18 : 0 }),
                    p("18:00-00:00"),
                ),
                div({ class: "matrix" },
                    renderSupergroups(page.SelectedSupergroups), // "Відомі"
                ),
                renderGroups(page.OtherGroups, "Інші"),
            )
        }

        return out
    }

    function renderData(container, data) {
        add(container,
            renderPages(data.Pages),
            div({ class: "header" }, "Підсумок"),
            () => renderGroups(aggregateOther.val, "Невідомі за всі документи", 0),
            () => renderGroups(aggregateSelected.val, "Сума за всі документи", 0),
            div({ class: `header` }, "Примітки"),
            () => { return renderedComments.val },
        )


        add(container,
            textarea(
                {
                    id: `summary`,
                    rows: 12,
                    value: () => summary.val,
                    style: `border-radius: 12px; border: 1px solid #eee; padding: 6px;`,
                },
            ),
            div({ class: `options` },
                button({ onclick: () => { navigator.clipboard.writeText(document.getElementById('summary').value); alert('Скопійовано!') } }, "Скопіювати"),
                button({ onclick: () => { navigator.share({ text: document.getElementById('summary').value }) } }, "Поділитися"),
            ),
        )

    }
</script>

<div id="container">

</div>